// schema.prisma

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
    id             String           @id @default(cuid())
    clerkId        String?          @unique
    businessName   String?
    firstName      String?
    lastName       String?
    email          String           @unique
    phone          String
    subscribed     Boolean          @default(false)
    createdAt      DateTime         @default(now()) @map(name: "created_at")
    updatedAt      DateTime         @updatedAt @map(name: "updated_at")
    inventoryItems InventoryItem[]
    customers      Customer[]
    transactions   Transaction[]

    @@map(name: "users")
}

model Customer {
    id              String        @id @default(cuid())
    firstName       String
    lastName        String
    email           String
    phone           String
    address         String
    city            String
    state           String
    zipCode         String
    ssn             String?       // Consider encryption for sensitive data
    dateOfBirth     DateTime
    licenseNumber   String?
    createdAt       DateTime      @default(now()) @map(name: "created_at")
    updatedAt       DateTime      @updatedAt @map(name: "updated_at")
    userId          String
    user            User          @relation(fields: [userId], references: [id])
    transactions    Transaction[]

    @@unique([userId, email])
    @@map(name: "customers")
}

model InventoryItem {
    id           String        @id @default(cuid())
    make         String
    model        String
    year         Int
    price        Float
    description  String?
    status       Status        @default(AVAILABLE)
    vin          String        @unique
    createdAt    DateTime      @default(now()) @map(name: "created_at")
    updatedAt    DateTime      @updatedAt @map(name: "updated_at")
    userId       String
    user         User          @relation(fields: [userId], references: [id])
    transactions Transaction[]

    @@map(name: "inventory_items")
}

model Transaction {
    id                String            @id @default(cuid())
    type              TransactionType
    amount            Float
    commission        Float
    date              DateTime          @default(now())
    notes             String?
    userId            String
    user              User              @relation(fields: [userId], references: [id])
    customerId        String
    customer          Customer          @relation(fields: [customerId], references: [id])
    inventoryItemId   String
    inventoryItem     InventoryItem     @relation(fields: [inventoryItemId], references: [id])
    financialDetails  FinancialDetails?

    @@map(name: "transactions")
}

model FinancialDetails {
    id                  String      @id @default(cuid())
    downPayment         Float?
    monthlyPayment      Float?
    leaseTerm           Int?        // in months
    interestRate        Float?
    totalLeaseCost      Float?
    residualValue       Float?
    transactionId       String      @unique
    transaction         Transaction @relation(fields: [transactionId], references: [id])

    @@map(name: "financial_details")
}

enum Status {
    AVAILABLE
    RESERVED
    SOLD
    LEASED
}

enum TransactionType {
    SALE
    LEASE
    BROKER
}

